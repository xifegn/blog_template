// Code generated by goctl. DO NOT EDIT.

package summary

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	summaryFieldNames          = builder.RawFieldNames(&Summary{}, true)
	summaryRows                = strings.Join(summaryFieldNames, ",")
	summaryRowsExpectAutoSet   = strings.Join(stringx.Remove(summaryFieldNames, "id"), ",")
	summaryRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(summaryFieldNames, "id"))

	cachePublicSummaryIdPrefix = "cache:public:summary:id:"
)

type (
	summaryModel interface {
		Insert(ctx context.Context, data *Summary) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Summary, error)
		Update(ctx context.Context, data *Summary) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSummaryModel struct {
		sqlc.CachedConn
		table string
	}

	Summary struct {
		Id       int64     `db:"id"`
		UserId   int64     `db:"user_id"`
		Date     time.Time `db:"date"`
		Title    string    `db:"title"`
		Content  string    `db:"content"`
		IsShared bool      `db:"is_shared"`
	}
)

func newSummaryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSummaryModel {
	return &defaultSummaryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."summary"`,
	}
}

func (m *defaultSummaryModel) withSession(session sqlx.Session) *defaultSummaryModel {
	return &defaultSummaryModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."summary"`,
	}
}

func (m *defaultSummaryModel) Delete(ctx context.Context, id int64) error {
	publicSummaryIdKey := fmt.Sprintf("%s%v", cachePublicSummaryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicSummaryIdKey)
	return err
}

func (m *defaultSummaryModel) FindOne(ctx context.Context, id int64) (*Summary, error) {
	publicSummaryIdKey := fmt.Sprintf("%s%v", cachePublicSummaryIdPrefix, id)
	var resp Summary
	err := m.QueryRowCtx(ctx, &resp, publicSummaryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", summaryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSummaryModel) Insert(ctx context.Context, data *Summary) (sql.Result, error) {
	publicSummaryIdKey := fmt.Sprintf("%s%v", cachePublicSummaryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, summaryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Date, data.Title, data.Content, data.IsShared)
	}, publicSummaryIdKey)
	return ret, err
}

func (m *defaultSummaryModel) Update(ctx context.Context, data *Summary) error {
	publicSummaryIdKey := fmt.Sprintf("%s%v", cachePublicSummaryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, summaryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Date, data.Title, data.Content, data.IsShared)
	}, publicSummaryIdKey)
	return err
}

func (m *defaultSummaryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicSummaryIdPrefix, primary)
}

func (m *defaultSummaryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", summaryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSummaryModel) tableName() string {
	return m.table
}
