// Code generated by goctl. DO NOT EDIT.

package follow

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	followFieldNames          = builder.RawFieldNames(&Follow{}, true)
	followRows                = strings.Join(followFieldNames, ",")
	followRowsExpectAutoSet   = strings.Join(stringx.Remove(followFieldNames, "id"), ",")
	followRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(followFieldNames, "id"))

	cachePublicFollowIdPrefix = "cache:public:follow:id:"
)

type (
	followModel interface {
		Insert(ctx context.Context, data *Follow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Follow, error)
		Update(ctx context.Context, data *Follow) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFollowModel struct {
		sqlc.CachedConn
		table string
	}

	Follow struct {
		Id         int64 `db:"id"`
		FollowerId int64 `db:"follower_id"`
		FolloweeId int64 `db:"followee_id"`
	}
)

func newFollowModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFollowModel {
	return &defaultFollowModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."follow"`,
	}
}

func (m *defaultFollowModel) withSession(session sqlx.Session) *defaultFollowModel {
	return &defaultFollowModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."follow"`,
	}
}

func (m *defaultFollowModel) Delete(ctx context.Context, id int64) error {
	publicFollowIdKey := fmt.Sprintf("%s%v", cachePublicFollowIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicFollowIdKey)
	return err
}

func (m *defaultFollowModel) FindOne(ctx context.Context, id int64) (*Follow, error) {
	publicFollowIdKey := fmt.Sprintf("%s%v", cachePublicFollowIdPrefix, id)
	var resp Follow
	err := m.QueryRowCtx(ctx, &resp, publicFollowIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", followRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowModel) Insert(ctx context.Context, data *Follow) (sql.Result, error) {
	publicFollowIdKey := fmt.Sprintf("%s%v", cachePublicFollowIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, followRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FollowerId, data.FolloweeId)
	}, publicFollowIdKey)
	return ret, err
}

func (m *defaultFollowModel) Update(ctx context.Context, data *Follow) error {
	publicFollowIdKey := fmt.Sprintf("%s%v", cachePublicFollowIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, followRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.FollowerId, data.FolloweeId)
	}, publicFollowIdKey)
	return err
}

func (m *defaultFollowModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicFollowIdPrefix, primary)
}

func (m *defaultFollowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", followRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFollowModel) tableName() string {
	return m.table
}
