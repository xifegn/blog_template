// Code generated by goctl. DO NOT EDIT.

package attachment

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	attachmentFieldNames          = builder.RawFieldNames(&Attachment{}, true)
	attachmentRows                = strings.Join(attachmentFieldNames, ",")
	attachmentRowsExpectAutoSet   = strings.Join(stringx.Remove(attachmentFieldNames, "id"), ",")
	attachmentRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(attachmentFieldNames, "id"))

	cachePublicAttachmentIdPrefix = "cache:public:attachment:id:"
)

type (
	attachmentModel interface {
		Insert(ctx context.Context, data *Attachment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Attachment, error)
		Update(ctx context.Context, data *Attachment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAttachmentModel struct {
		sqlc.CachedConn
		table string
	}

	Attachment struct {
		Id        int64  `db:"id"`
		SummaryId int64  `db:"summary_id"`
		Url       string `db:"url"`
		Type      string `db:"type"`
	}
)

func newAttachmentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAttachmentModel {
	return &defaultAttachmentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."attachment"`,
	}
}

func (m *defaultAttachmentModel) withSession(session sqlx.Session) *defaultAttachmentModel {
	return &defaultAttachmentModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."attachment"`,
	}
}

func (m *defaultAttachmentModel) Delete(ctx context.Context, id int64) error {
	publicAttachmentIdKey := fmt.Sprintf("%s%v", cachePublicAttachmentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicAttachmentIdKey)
	return err
}

func (m *defaultAttachmentModel) FindOne(ctx context.Context, id int64) (*Attachment, error) {
	publicAttachmentIdKey := fmt.Sprintf("%s%v", cachePublicAttachmentIdPrefix, id)
	var resp Attachment
	err := m.QueryRowCtx(ctx, &resp, publicAttachmentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", attachmentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAttachmentModel) Insert(ctx context.Context, data *Attachment) (sql.Result, error) {
	publicAttachmentIdKey := fmt.Sprintf("%s%v", cachePublicAttachmentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, attachmentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SummaryId, data.Url, data.Type)
	}, publicAttachmentIdKey)
	return ret, err
}

func (m *defaultAttachmentModel) Update(ctx context.Context, data *Attachment) error {
	publicAttachmentIdKey := fmt.Sprintf("%s%v", cachePublicAttachmentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, attachmentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.SummaryId, data.Url, data.Type)
	}, publicAttachmentIdKey)
	return err
}

func (m *defaultAttachmentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicAttachmentIdPrefix, primary)
}

func (m *defaultAttachmentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", attachmentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAttachmentModel) tableName() string {
	return m.table
}
