// Code generated by goctl. DO NOT EDIT.

package image

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	imageFieldNames          = builder.RawFieldNames(&Image{}, true)
	imageRows                = strings.Join(imageFieldNames, ",")
	imageRowsExpectAutoSet   = strings.Join(stringx.Remove(imageFieldNames, "id"), ",")
	imageRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(imageFieldNames, "id"))

	cachePublicImageIdPrefix = "cache:public:image:id:"
)

type (
	imageModel interface {
		Insert(ctx context.Context, data *Image) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Image, error)
		Update(ctx context.Context, data *Image) error
		Delete(ctx context.Context, id int64) error
	}

	defaultImageModel struct {
		sqlc.CachedConn
		table string
	}

	Image struct {
		Id        int64  `db:"id"`
		SummaryId int64  `db:"summary_id"`
		Url       string `db:"url"`
	}
)

func newImageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultImageModel {
	return &defaultImageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."image"`,
	}
}

func (m *defaultImageModel) withSession(session sqlx.Session) *defaultImageModel {
	return &defaultImageModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."image"`,
	}
}

func (m *defaultImageModel) Delete(ctx context.Context, id int64) error {
	publicImageIdKey := fmt.Sprintf("%s%v", cachePublicImageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicImageIdKey)
	return err
}

func (m *defaultImageModel) FindOne(ctx context.Context, id int64) (*Image, error) {
	publicImageIdKey := fmt.Sprintf("%s%v", cachePublicImageIdPrefix, id)
	var resp Image
	err := m.QueryRowCtx(ctx, &resp, publicImageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", imageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImageModel) Insert(ctx context.Context, data *Image) (sql.Result, error) {
	publicImageIdKey := fmt.Sprintf("%s%v", cachePublicImageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, imageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SummaryId, data.Url)
	}, publicImageIdKey)
	return ret, err
}

func (m *defaultImageModel) Update(ctx context.Context, data *Image) error {
	publicImageIdKey := fmt.Sprintf("%s%v", cachePublicImageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, imageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.SummaryId, data.Url)
	}, publicImageIdKey)
	return err
}

func (m *defaultImageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicImageIdPrefix, primary)
}

func (m *defaultImageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", imageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultImageModel) tableName() string {
	return m.table
}
