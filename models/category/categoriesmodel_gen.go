// Code generated by goctl. DO NOT EDIT.

package category

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	categoriesFieldNames          = builder.RawFieldNames(&Categories{})
	categoriesRows                = strings.Join(categoriesFieldNames, ",")
	categoriesRowsExpectAutoSet   = strings.Join(stringx.Remove(categoriesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	categoriesRowsWithPlaceHolder = strings.Join(stringx.Remove(categoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCategoriesIdPrefix = "cache:categories:id:"
)

type (
	categoriesModel interface {
		Insert(ctx context.Context, data *Categories) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Categories, error)
		Update(ctx context.Context, data *Categories) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCategoriesModel struct {
		sqlc.CachedConn
		table string
	}

	Categories struct {
		Id           int64          `db:"id"`
		CategoryName sql.NullString `db:"category_name"`
	}
)

func newCategoriesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCategoriesModel {
	return &defaultCategoriesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`categories`",
	}
}

func (m *defaultCategoriesModel) Delete(ctx context.Context, id int64) error {
	categoriesIdKey := fmt.Sprintf("%s%v", cacheCategoriesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, categoriesIdKey)
	return err
}

func (m *defaultCategoriesModel) FindOne(ctx context.Context, id int64) (*Categories, error) {
	categoriesIdKey := fmt.Sprintf("%s%v", cacheCategoriesIdPrefix, id)
	var resp Categories
	err := m.QueryRowCtx(ctx, &resp, categoriesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoriesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoriesModel) Insert(ctx context.Context, data *Categories) (sql.Result, error) {
	categoriesIdKey := fmt.Sprintf("%s%v", cacheCategoriesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, categoriesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.CategoryName)
	}, categoriesIdKey)
	return ret, err
}

func (m *defaultCategoriesModel) Update(ctx context.Context, data *Categories) error {
	categoriesIdKey := fmt.Sprintf("%s%v", cacheCategoriesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, categoriesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CategoryName, data.Id)
	}, categoriesIdKey)
	return err
}

func (m *defaultCategoriesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCategoriesIdPrefix, primary)
}

func (m *defaultCategoriesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoriesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCategoriesModel) tableName() string {
	return m.table
}
